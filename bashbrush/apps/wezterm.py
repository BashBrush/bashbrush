from __future__ import annotations
from pathlib import Path
from typing import List, Tuple
import re
from bashbrush.core.palette import ensure_16, rgb_to_hex
from bashbrush.settings import Paths

def apply_theme(palette: List[Tuple[int,int,int]], wallpaper_path: Path, paths: Paths) -> None:
    print("\n--- Processing WezTerm ---")
    
    paths.wezterm_colors.mkdir(parents=True, exist_ok=True)
    normal, brights = ensure_16(palette)
    
    name_map = ["black", "red", "green", "yellow", "blue", "purple", "cyan", "white"]

    ansi_colors = "\n".join([f"      '{rgb_to_hex(c)}', -- {name_map[i]}" for i, c in enumerate(normal)])
    bright_colors = "\n".join([f"      '{rgb_to_hex(c)}', -- {name_map[i]}" for i, c in enumerate(brights)])

    lua_theme = f"""-- WezTerm theme generated by bashbrush for {wallpaper_path.name}
return {{
    foreground = '{rgb_to_hex(palette[-1])}',
    background = '{rgb_to_hex(palette[0])}',
    cursor_bg = '{rgb_to_hex(palette[-1])}',
    cursor_fg = '{rgb_to_hex(palette[0])}',
    selection_fg = '{rgb_to_hex(palette[0])}',
    selection_bg = '{rgb_to_hex(palette[-1])}',
    ansi = {{
{ansi_colors}
    }},
    brights = {{
{bright_colors}
    }},
}} """

    theme_name = wallpaper_path.stem
    theme_filename = theme_name + ".lua"
    theme_path = (paths.wezterm_colors / theme_filename).resolve()
    theme_path.write_text(lua_theme, encoding="utf-8")
    print(f"Exported WezTerm theme to: {theme_path}")

    # Update wezterm.lua config file automatically
    config_path = paths.wezterm_config
    if config_path.exists():
        config_content = config_path.read_text(encoding="utf-8")
    else:
        # Create default config if it doesn't exist
        config_content = """local wezterm = require 'wezterm'
local config = wezterm.config_builder()

return config
"""
    
    # Define the bashbrush theme block
    theme_block = f"""-- BEGIN: bashbrush theme
config.color_schemes = config.color_schemes or {{}}
config.color_schemes['{theme_name}'] = require 'colors.{theme_name}'
config.color_scheme = '{theme_name}'
-- END: bashbrush theme"""
    
    # Remove existing bashbrush theme block if it exists
    config_content = re.sub(
        r"-- BEGIN: bashbrush theme.*?-- END: bashbrush theme\s*",
        "",
        config_content,
        flags=re.DOTALL
    )
    
    # Find the return config line and insert the theme block before it
    if "return config" in config_content:
        config_content = re.sub(
            r"(return config)",
            f"{theme_block}\n\n\\1",
            config_content,
            count=1
        )
    else:
        # If no return config line, append the theme block at the end
        config_content = config_content.rstrip() + f"\n\n{theme_block}\n\nreturn config"
    
    # Write the updated config
    config_path.write_text(config_content, encoding="utf-8")
    print(f"Updated WezTerm config at: {config_path}")
