from __future__ import annotations
from pathlib import Path
from typing import List, Tuple
from bashbrush.core.palette import ensure_16, rgb_to_hex
from bashbrush.core.config import update_config
from bashbrush.settings import Paths

def apply_theme(palette: List[Tuple[int,int,int]], wallpaper_path: Path, paths: Paths) -> None:
    print("\n--- Processing Ghostty ---")
    paths.ghostty_themes.mkdir(parents=True, exist_ok=True)
    normal, brights = ensure_16(palette)

    lines = [
        f"# Ghostty theme generated by bashbrush for {wallpaper_path.name}",
        f"background = {rgb_to_hex(palette[0])}",
        f"foreground = {rgb_to_hex(palette[-1])}",
        f"cursor-color = {rgb_to_hex(palette[-1])}",
        f"selection-background = {rgb_to_hex(normal[2])}",
        f"selection-foreground = {rgb_to_hex(palette[0])}",
        ""
    ]
    all16 = normal + brights
    for i, c in enumerate(all16):
        lines.append(f"palette = {i}={rgb_to_hex(c)}")

    theme_filename = wallpaper_path.stem  # Ghostty theme names don't need extensions
    theme_path = (paths.ghostty_themes / theme_filename).resolve()
    theme_path.write_text("\n".join(lines) + "\n", encoding="utf-8")
    print(f"Exported Ghostty theme to: {theme_path}")

    update_config(
        paths.ghostty_config,
        f"theme = {theme_filename}\n",
        r"^\s*theme\s*="
    )
